# BackendSchult

API Spring Boot (Java 17) pour la gestion RH (congés) et magasin (fournisseurs, matériaux, stocks, commandes, factures), avec sécurité JWT et MySQL.

## Prérequis
- Java 17, Maven 3.9+
- MySQL 8.x (base et utilisateur créés)
- Port par défaut: 8089

## Configuration
Crée/complète `src/main/resources/application.properties`:

spring.datasource.url=jdbc:mysql://localhost:3306/schult?useSSL=false&serverTimezone=UTC
spring.datasource.username=your_user
spring.datasource.password=your_password
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
JWT
app.jwt.secret=change-me
app.jwt.expiration-ms=3600000


## Lancement
- Dev: `mvn spring-boot:run`
- Build: `mvn clean package` puis `java -jar target/BackendSchult-0.0.1-SNAPSHOT.jar`
- Swagger UI (si activé): `http://localhost:8089/swagger-ui/index.html`

## Sécurité
- Authentification JWT (login/register).
- Roles: `ADMIN`, `RH`, `CHEF`, `EMPLOYE`.
- Exemples de règles:
  - `/admin/**`: `hasAnyRole('ADMIN','RH')`
  - `/conge/**`: `hasAnyRole('ADMIN','RH')`
  - Création de congé côté chef via endpoints/services dédiés.

## Domaines et Endpoints (principaux)

### Gestion des congés (Chef ↔ RH)
- Statuts: `EN_ATTENTE`, `VALIDEE`, `REFUSEE`.
- RH/ADMIN:
  - `GET /conge` → liste des demandes
  - `POST /conge/valider/{id}` → valider
  - `POST /conge/refuser/{id}` → refuser
  - `DELETE /conge/{id}` → supprimer
- Création côté Chef:
  - via service (ex: `UserService.creerDemandeConge(employeId, dateDebut, dateFin, motif)`).
  - optionnel: exposer un endpoint `POST /chef/demande` selon vos besoins.

### Gestion du magasin
- Fournisseur:
  - `GET /fournisseur/list`, `POST /fournisseur/ajouter`, `PUT /fournisseur/{id}`, `DELETE /fournisseur/{id}`
- Matériaux:
  - `GET /materials/list`, `POST /materials/ajouter`, `PUT /materials/{id}`, `DELETE /materials/{id}`
- Stocks:
  - `GET /stock`, `POST /stock/add`, `PUT /stock/{id}`, `DELETE /stock/{id}`
- Commandes:
  - `GET /commande`, `GET /commande/{id}`, `POST /commande/add`, `PUT /commande/{id}`, `DELETE /commande/{id}`
  - Création: envoyer `fournisseur` sous forme `{ "id": number }`
- Factures:
  - `GET /facture`, `GET /facture/{id}`, `POST /facture`, `PUT /facture/{id}`, `DELETE /facture/{id}`

### Admin / Utilisateurs / Stats / Avatar
- Users:
  - `GET /admin` → liste
  - `GET /admin/getUserById/{id}`
  - `POST /admin/addUser`
  - `PUT /admin/updateUser/{id}`
  - `DELETE /admin/deleteUser/{id}`
  - `PUT /admin/assignEmployeToChef?employeId=&chefId=`
- Stats Dashboard:
  - `GET /admin/stats` → `{ commandes, factures, utilisateurs, stocks, materiaux, fournisseurs }`
- Upload Avatar (réel, URL simulée):
  - `POST /admin/{id}/avatar` (multipart `file`)
  - Réponse: `{ "avatarUrl": "http://localhost:8089/uploads/<file>" }`
  - À remplacer par stockage réel (dossier `uploads` servi par Spring, S3, ...).

## Conseils
- 403 Forbidden: vérifier JWT/roles + règles `SecurityConfig`.
- CORS: `.cors()` et origins si front sur `4200`.
- Formats dates: ISO `yyyy-MM-dd` pour le front.

## Notes de renommage
- groupId: `tn.schult`, artifactId: `BackendSchult`, classe main: `tn.schult.BackendSchultApplication`.
- Refactor recommandé: packages en `tn.schult` (controllers, services, repositories, entities, DAO, config, aspects).
- Renommer le dossier physique (si ouvert par l’IDE, fermer l’application avant).
















2-front 
# Frontend (Angular)

UI d’administration (dashboard) pour RH, chefs, gestion magasin et statistiques.

## Prérequis
- Node 18+, npm 9+
- Angular CLI (recommandé): `npm i -g @angular/cli`

## Installation & Lancement

npm install
ng serve -o



## Configuration
- API par défaut: `http://localhost:8089`
- `angular.json` (styles):
  - `node_modules/primeicons/primeicons.css`
  - `node_modules/primeng/resources/themes/lara-light-blue/theme.css`
  - `node_modules/primeng/resources/primeng.min.css`
  - `node_modules/@fortawesome/fontawesome-free/css/all.min.css`
- Intercepteur HTTP: ajoute `Authorization: Bearer <token>` automatiquement.

## Fonctionnalités
- Dashboard:
  - Cards stats + Chart.js (bar, pie, line, radar) depuis `/admin/stats`.
- Gestion des congés:
  - `chef-list`: création de demande pour employés du chef.
  - `demande-conge`: table modernisée (badges, actions), RH/ADMIN: valider/refuser/supprimer.
- Gestion magasin:
  - Fournisseurs, Matériaux, Stocks, Commandes, Factures: listes + formulaires CRUD.
  - Tables modernisées (coins arrondis, header sticky-like, hover, icônes d’action rondes).
  - Export PDF (fournisseurs) via jsPDF & `jspdf-autotable`.
- Profil utilisateur:
  - Édition `username, email, firstName, lastName`.
  - Upload avatar: input fichier (affichage immédiat), envoi `POST /admin/{id}/avatar`.

## Routes (exemples)
- `/dashboard/home` → stats & graphiques
- `/dashboard/fournisseurs`, `/materials`, `/stock`, `/commandes`, `/factures`
- `/dashboard/demandes-conge` → RH/ADMIN
- `/dashboard/profile` → profil utilisateur

## Services (extraits)
- `dashboard.service.ts` → `/admin/stats`
- `commande.service.ts` → `/commande` (CRUD)
- `facture.service.ts` → `/facture` (CRUD)
- `fournisseur.service.ts` → `/fournisseur` (CRUD)
- `materials.service.ts` → `/materials` (CRUD)
- `stock.service.ts` → `/stock` (CRUD)
- `conge.service.ts` → `getAllDemandes`, `validerDemande`, `refuserDemande`, `supprimerDemande`, `creerDemande`
- `user-profile.service.ts` → `getUserProfile`, `updateProfile`, `uploadAvatar(file, userId)`

## UX & Styles
- Tables `.modern-table`, boutons `.icon-btn`, badges `.status-badge`.
- PrimeNG + PrimeIcons, Font Awesome.
- Chart.js natif pour graphiques (bar, pie, line, radar).

## Build


ng build


## Dépannage
- Icônes absentes: vérifier imports CSS (PrimeIcons/FontAwesome).
- 403 API: vérifier token/roles (front envoie bien le header `Authorization`).
- Graphiques vides: endpoint `/admin/stats` accessible, rôle correct.
- Upload avatar: `multipart/form-data`, champ `file`, endpoint `/admin/{id}/avatar`.

## Tests manuels (exemples)
- Congés: connecter CHEF → créer demande; connecter RH → valider/refuser.
- Magasin: CRUD fournisseurs/matériaux/stocks/commandes/factures.
- Dashboard: vérifier stats/graphs.
- Profil: modifier infos + avatar, persistance après refresh.






